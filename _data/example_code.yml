- lang: javascript
  code: |
    //JavaScript
    function binarySearch(A, x) {
      let start = 0;
      let end = A.length - 1;
      while (start <= end) {
        const middle = Math.floor((start + end) / 2);
        if (A[middle] === x) {
          return middle;
        }
        if (A[middle] > x) {
          end = middle - 1;
        } else {
          start = middle + 1;
        }
      }
      return -1;
    }

    const library = ['Algorytmy', 'Czysty kod', 'Harry Potter', 'Illuminati', 'Wzorce projektowe', '...'];
    /* Dla wyszukiwania binarnego
     tablica musi być posortowana rosnąco */

    const x = 'Illuminati';
    const foundXAt = binarySearch(library, x);

    console.log('Znaleziono "' + x + '" na pozycji ' + foundXAt);
    // Znaleziono "Illuminati" na pozycji 3

- lang: cpp
  code: |
    //C++
    #include &#60;iostream&#62;
    using namespace std;

    int binarySearch(string A[], string x) {
      int start = 0;
      int end = sizeof(A) - 1;
      while (start <= end) {
        int middle = (start + end) / 2;
        if (A[middle] == x) {
          return middle;
        }
        if (A[middle] > x) {
          end = middle - 1;
        } else {
          start = middle + 1;
        }
      }
      return -1;
    }

    int main() {
      string library[] = {"Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "..."};
      /* Dla wyszukiwania binarnego
      tablica musi być posortowana rosnąco */

      string x = "Illuminati";
      int foundXat = binarySearch(library, x);

      cout << "Znaleziono \"" + x + "\" na pozycji " + to_string(foundXat)<< endl;
      // Znaleziono "Illuminati" na pozycji 3
    }

- lang: php
  code: |
    //PHP
    function binarySearch($A, $x) {
      $start = 0;
      $end = sizeof($A) - 1;
      while ($start <= $end) {
        $middle = floor(($start + $end) / 2);
        if ($A[$middle] === $x) {
          return $middle;
        }
        if ($A[$middle] > $x) {
          $end = $middle - 1;
        } else {
          $start = $middle + 1;
        }
      }
      return -1;
    }

    $library = array("Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "...");
    /* Dla wyszukiwania binarnego
    tablica musi być posortowana rosnąco */

    $x = "Illuminati";
    $foundXAt = binarySearch($library, $x);

    echo "Znaleziono \" $x \" na pozycji $foundXAt";
    //Znaleziono "Illuminati" na pozycji 3

- lang: java
  code: |
    //Java
    public class BinarySearch {
      public static int binarySearch(String[] A, String x) {
        int start = 0;
        int end = A.length - 1;
        while (start <= end) {
          int middle = (start + end) / 2;
          if (A[middle].equals(x)) {
            return middle;
          }
          if(A[middle].compareTo(x) > 0) {
            end = middle-1;
          } else {
            start = middle+1;
          }
        }
        return -1;
      }

      public static void main(String[] args) {
        String[] library = {"Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "..."};
        /* Dla wyszukiwania binarnego
        tablica musi być posortowana rosnąco */

        String x = "Illuminati";
        int foundXAt = binarySearch(library, x);

        System.out.println("Znaleziono \"" + x + "\" na pozycji " + foundXAt);
        // Znaleziono "Illuminati" na pozycji 3
      }
    }

- lang: ruby
  code: |
    #Ruby
    def binarySearch(a, x)
      startAt = 0
      endAt = a.length - 1
      while startAt <= endAt
        middle = ((startAt + endAt) / 2).floor
        if a[middle] == x
          return middle
        else
          if a[middle] > x
            endAt = middle - 1
          else
            startAt = middle + 1
          end
        end
      end
      return -1
    end

    library = ["Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "..."]
    # Dla wyszukiwania binarnego
    # tablica musi być posortowana rosnąco

    x = "Illuminati";
    foundXAt = binarySearch(library, x);
    puts("Znaleziono \"" + x + "\" na pozycji " + foundXAt.to_s)
    # Znaleziono "Illuminati" na pozycji 3

- lang: python
  code: |
    #Python
    def binarySearch(A, x) :
      start = 0
      end = len(A) - 1
      while start <= end :
        middle = (start+end) // 2
        if A[middle] == x :
          return middle
        if A[middle] > x :
          end = middle - 1
        else:
          start = middle + 1
      return -1

    library = ["Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "..."]
    # Dla wyszukiwania binarnego
    # tablica musi być posortowana rosnąco

    x = "Illuminati"
    foundXAt = binarySearch(library, x)

    print("Znaleziono \"" + x + "\" na pozycji " + str(foundXAt))
    # Znaleziono "Illuminati" na pozycji 3

- lang: c
  code: |
    //C
    #include &#60;stdio.h&#62;

    int binarySearch(char *A[], char *x, int Asize){
      int start = 0;
      int end = Asize - 1;
      while(start <= end) {
        int middle = (start + end) / 2;
        if (strcmp(A[middle], x) == 0) {
          return middle;
        }
        if (strcmp(A[middle], x) > 0) {
          end = middle - 1;

        } else {
          start = middle + 1;

        }
      }
      return -1;
    }

    int main(void) {
      char *A[6] = {"Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "..."};
      /* Dla wyszukiwania binarnego
      tablica musi być posortowana rosnąco */

      int arrSize = sizeof(A) / sizeof(A[0]);
      char x[] = "Illuminati";
      int foundXAt = binarySearch(A, x, arrSize);

      printf("Znaleziono \"%s\" na pozycji %d \n", x, foundXAt);
      // Znaleziono "Illuminati" na pozycji 3
    }

- lang: swift
  code: |
      //Swift
      func binarySearch(A: [String], x: String) -> Int {
        var start = 0;
        var end = A.count - 1;
        while (start<=end) {
          var middle = (start+end) / 2;
          if (A[middle] == x) {
            return middle;
          }
          if (A[middle] > x) {
            end = middle - 1;
          } else {
            start = middle + 1;
          }
        }
        return -1;

      }

      var library = ["Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "..."];
      /* Dla wyszukiwania binarnego
      tablica musi być posortowana rosnąco */

      var x = "Illuminati";
      var foundXAt = binarySearch(A: library, x: x);
      print("Znaleziono \"" + String(x) + "\" na pozycji " + String(foundXAt));
      // Znaleziono "Illuminati" na pozycji 3

- lang: csharp
  code: |
      //C♯
      using System;
      class MainClass {
        public static int binarySearch(String[] A, String x){
          int start = 0;
          int end = A.Length - 1;
          while(start <= end) {
            int middle = (start+end) / 2;
            if (A[middle] == x) {
              return middle;
            }
            if(A[middle].CompareTo(x) > 0){
              end = middle - 1;
            } else {
              start = middle + 1;
            }
          }
          return -1;
        }

        public static void Main(String[] args) {
          String[] library = {"Algorytmy", "Czysty kod" ,"Harry Potter" , "Illuminati", "Wzorce projektowe", "..."};
          /* Dla wyszukiwania binarnego
          tablica musi być posortowana rosnąco */

          String x = "Illuminati";
          int foundXAt = binarySearch(library, x);

          Console.WriteLine("Znaleziono \"" + x + "\" na pozycji " + foundXAt);
          // Znaleziono "Illuminati" na pozycji 3
        }
      }

- lang: r
  code: |
    #R
    binarySearch <- function (A, x){
      start <- 0;
      end <- length(A) - 1;
      while (start <= end) {
        middle <- floor((start+end) / 2);
        if (A[middle] == x) {
          return(middle);
        }
        if(A[middle] > x){
          end = middle - 1;
        }
        else{
          start = middle + 1;
        }
      }
      return -1;
    }

    library <- c("Algorytmy", "Czysty kod", "Harry Potter", "Illuminati", "Wzorce projektowe", "...");
    # Dla wyszukiwania binarnego
    # tablica musi być posortowana rosnąco
    x = "Illuminati";
    foundXAt = binarySearch(library, x);
    print(paste("Znaleziono ", x, " na pozycji ", foundXAt));
    # Znaleziono "Illuminati" na pozycji 4